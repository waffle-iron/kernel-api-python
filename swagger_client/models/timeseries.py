# coding: utf-8

"""
    Kernel API

    Access Kernel insights programmatically

    OpenAPI spec version: 0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Timeseries(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, values=None, metric_id=None, geography=None, date_range=None):
        """
        Timeseries - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'values': 'list[TimeseriesValue]',
            'metric_id': 'str',
            'geography': 'Geography',
            'date_range': 'DateRange'
        }

        self.attribute_map = {
            'values': 'values',
            'metric_id': 'metric_id',
            'geography': 'geography',
            'date_range': 'date_range'
        }

        self._values = values
        self._metric_id = metric_id
        self._geography = geography
        self._date_range = date_range

    @property
    def values(self):
        """
        Gets the values of this Timeseries.

        :return: The values of this Timeseries.
        :rtype: list[TimeseriesValue]
        """
        return self._values

    @values.setter
    def values(self, values):
        """
        Sets the values of this Timeseries.

        :param values: The values of this Timeseries.
        :type: list[TimeseriesValue]
        """

        self._values = values

    @property
    def metric_id(self):
        """
        Gets the metric_id of this Timeseries.

        :return: The metric_id of this Timeseries.
        :rtype: str
        """
        return self._metric_id

    @metric_id.setter
    def metric_id(self, metric_id):
        """
        Sets the metric_id of this Timeseries.

        :param metric_id: The metric_id of this Timeseries.
        :type: str
        """

        self._metric_id = metric_id

    @property
    def geography(self):
        """
        Gets the geography of this Timeseries.

        :return: The geography of this Timeseries.
        :rtype: Geography
        """
        return self._geography

    @geography.setter
    def geography(self, geography):
        """
        Sets the geography of this Timeseries.

        :param geography: The geography of this Timeseries.
        :type: Geography
        """

        self._geography = geography

    @property
    def date_range(self):
        """
        Gets the date_range of this Timeseries.

        :return: The date_range of this Timeseries.
        :rtype: DateRange
        """
        return self._date_range

    @date_range.setter
    def date_range(self, date_range):
        """
        Sets the date_range of this Timeseries.

        :param date_range: The date_range of this Timeseries.
        :type: DateRange
        """

        self._date_range = date_range

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Timeseries):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
