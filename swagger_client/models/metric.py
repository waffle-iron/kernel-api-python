# coding: utf-8

"""
    Kernel API

    Access Kernel insights programmatically

    OpenAPI spec version: 0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Metric(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, metric_code=None, metric_display_name=None, metric_description=None, metric_uom=None, metric_uom_description=None, metric_category=None):
        """
        Metric - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'metric_code': 'str',
            'metric_display_name': 'str',
            'metric_description': 'str',
            'metric_uom': 'str',
            'metric_uom_description': 'str',
            'metric_category': 'str'
        }

        self.attribute_map = {
            'metric_code': 'metric_code',
            'metric_display_name': 'metric_display_name',
            'metric_description': 'metric_description',
            'metric_uom': 'metric_uom',
            'metric_uom_description': 'metric_uom_description',
            'metric_category': 'metric_category'
        }

        self._metric_code = metric_code
        self._metric_display_name = metric_display_name
        self._metric_description = metric_description
        self._metric_uom = metric_uom
        self._metric_uom_description = metric_uom_description
        self._metric_category = metric_category

    @property
    def metric_code(self):
        """
        Gets the metric_code of this Metric.

        :return: The metric_code of this Metric.
        :rtype: str
        """
        return self._metric_code

    @metric_code.setter
    def metric_code(self, metric_code):
        """
        Sets the metric_code of this Metric.

        :param metric_code: The metric_code of this Metric.
        :type: str
        """

        self._metric_code = metric_code

    @property
    def metric_display_name(self):
        """
        Gets the metric_display_name of this Metric.

        :return: The metric_display_name of this Metric.
        :rtype: str
        """
        return self._metric_display_name

    @metric_display_name.setter
    def metric_display_name(self, metric_display_name):
        """
        Sets the metric_display_name of this Metric.

        :param metric_display_name: The metric_display_name of this Metric.
        :type: str
        """

        self._metric_display_name = metric_display_name

    @property
    def metric_description(self):
        """
        Gets the metric_description of this Metric.

        :return: The metric_description of this Metric.
        :rtype: str
        """
        return self._metric_description

    @metric_description.setter
    def metric_description(self, metric_description):
        """
        Sets the metric_description of this Metric.

        :param metric_description: The metric_description of this Metric.
        :type: str
        """

        self._metric_description = metric_description

    @property
    def metric_uom(self):
        """
        Gets the metric_uom of this Metric.

        :return: The metric_uom of this Metric.
        :rtype: str
        """
        return self._metric_uom

    @metric_uom.setter
    def metric_uom(self, metric_uom):
        """
        Sets the metric_uom of this Metric.

        :param metric_uom: The metric_uom of this Metric.
        :type: str
        """

        self._metric_uom = metric_uom

    @property
    def metric_uom_description(self):
        """
        Gets the metric_uom_description of this Metric.

        :return: The metric_uom_description of this Metric.
        :rtype: str
        """
        return self._metric_uom_description

    @metric_uom_description.setter
    def metric_uom_description(self, metric_uom_description):
        """
        Sets the metric_uom_description of this Metric.

        :param metric_uom_description: The metric_uom_description of this Metric.
        :type: str
        """

        self._metric_uom_description = metric_uom_description

    @property
    def metric_category(self):
        """
        Gets the metric_category of this Metric.

        :return: The metric_category of this Metric.
        :rtype: str
        """
        return self._metric_category

    @metric_category.setter
    def metric_category(self, metric_category):
        """
        Sets the metric_category of this Metric.

        :param metric_category: The metric_category of this Metric.
        :type: str
        """

        self._metric_category = metric_category

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Metric):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
