# coding: utf-8

"""
    Kernel API

    Access Kernel insights programmatically

    OpenAPI spec version: 0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class UserAlertPreferences(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, email_address=None, phone_number=None, email_pref=None, sms_pref=None, sms_sig_threshold=None, push_pref=None):
        """
        UserAlertPreferences - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'email_address': 'str',
            'phone_number': 'str',
            'email_pref': 'str',
            'sms_pref': 'str',
            'sms_sig_threshold': 'str',
            'push_pref': 'str'
        }

        self.attribute_map = {
            'email_address': 'email_address',
            'phone_number': 'phone_number',
            'email_pref': 'email_pref',
            'sms_pref': 'sms_pref',
            'sms_sig_threshold': 'sms_sig_threshold',
            'push_pref': 'push_pref'
        }

        self._email_address = email_address
        self._phone_number = phone_number
        self._email_pref = email_pref
        self._sms_pref = sms_pref
        self._sms_sig_threshold = sms_sig_threshold
        self._push_pref = push_pref

    @property
    def email_address(self):
        """
        Gets the email_address of this UserAlertPreferences.
        User email address

        :return: The email_address of this UserAlertPreferences.
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """
        Sets the email_address of this UserAlertPreferences.
        User email address

        :param email_address: The email_address of this UserAlertPreferences.
        :type: str
        """

        self._email_address = email_address

    @property
    def phone_number(self):
        """
        Gets the phone_number of this UserAlertPreferences.
        User phone number

        :return: The phone_number of this UserAlertPreferences.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """
        Sets the phone_number of this UserAlertPreferences.
        User phone number

        :param phone_number: The phone_number of this UserAlertPreferences.
        :type: str
        """

        self._phone_number = phone_number

    @property
    def email_pref(self):
        """
        Gets the email_pref of this UserAlertPreferences.
        User email alert preferences

        :return: The email_pref of this UserAlertPreferences.
        :rtype: str
        """
        return self._email_pref

    @email_pref.setter
    def email_pref(self, email_pref):
        """
        Sets the email_pref of this UserAlertPreferences.
        User email alert preferences

        :param email_pref: The email_pref of this UserAlertPreferences.
        :type: str
        """

        self._email_pref = email_pref

    @property
    def sms_pref(self):
        """
        Gets the sms_pref of this UserAlertPreferences.
        User sms alert preferences

        :return: The sms_pref of this UserAlertPreferences.
        :rtype: str
        """
        return self._sms_pref

    @sms_pref.setter
    def sms_pref(self, sms_pref):
        """
        Sets the sms_pref of this UserAlertPreferences.
        User sms alert preferences

        :param sms_pref: The sms_pref of this UserAlertPreferences.
        :type: str
        """

        self._sms_pref = sms_pref

    @property
    def sms_sig_threshold(self):
        """
        Gets the sms_sig_threshold of this UserAlertPreferences.
        User sms alert significance threshold

        :return: The sms_sig_threshold of this UserAlertPreferences.
        :rtype: str
        """
        return self._sms_sig_threshold

    @sms_sig_threshold.setter
    def sms_sig_threshold(self, sms_sig_threshold):
        """
        Sets the sms_sig_threshold of this UserAlertPreferences.
        User sms alert significance threshold

        :param sms_sig_threshold: The sms_sig_threshold of this UserAlertPreferences.
        :type: str
        """

        self._sms_sig_threshold = sms_sig_threshold

    @property
    def push_pref(self):
        """
        Gets the push_pref of this UserAlertPreferences.
        User web push alert preferences

        :return: The push_pref of this UserAlertPreferences.
        :rtype: str
        """
        return self._push_pref

    @push_pref.setter
    def push_pref(self, push_pref):
        """
        Sets the push_pref of this UserAlertPreferences.
        User web push alert preferences

        :param push_pref: The push_pref of this UserAlertPreferences.
        :type: str
        """

        self._push_pref = push_pref

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, UserAlertPreferences):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
