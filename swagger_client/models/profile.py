# coding: utf-8

"""
    Kernel API

    Access Kernel insights programmatically

    OpenAPI spec version: 0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Profile(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, first_name=None, last_name=None, email=None, company_name=None, picture=None, subscription_type=None, subscribed_crops=None):
        """
        Profile - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'first_name': 'str',
            'last_name': 'str',
            'email': 'str',
            'company_name': 'str',
            'picture': 'str',
            'subscription_type': 'str',
            'subscribed_crops': 'list[Crop]'
        }

        self.attribute_map = {
            'first_name': 'first_name',
            'last_name': 'last_name',
            'email': 'email',
            'company_name': 'company_name',
            'picture': 'picture',
            'subscription_type': 'subscription_type',
            'subscribed_crops': 'subscribed_crops'
        }

        self._first_name = first_name
        self._last_name = last_name
        self._email = email
        self._company_name = company_name
        self._picture = picture
        self._subscription_type = subscription_type
        self._subscribed_crops = subscribed_crops

    @property
    def first_name(self):
        """
        Gets the first_name of this Profile.
        First name of the user.

        :return: The first_name of this Profile.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """
        Sets the first_name of this Profile.
        First name of the user.

        :param first_name: The first_name of this Profile.
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """
        Gets the last_name of this Profile.
        Last name of the user.

        :return: The last_name of this Profile.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """
        Sets the last_name of this Profile.
        Last name of the user.

        :param last_name: The last_name of this Profile.
        :type: str
        """

        self._last_name = last_name

    @property
    def email(self):
        """
        Gets the email of this Profile.
        Email address of the user

        :return: The email of this Profile.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this Profile.
        Email address of the user

        :param email: The email of this Profile.
        :type: str
        """

        self._email = email

    @property
    def company_name(self):
        """
        Gets the company_name of this Profile.
        Company name of the user

        :return: The company_name of this Profile.
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """
        Sets the company_name of this Profile.
        Company name of the user

        :param company_name: The company_name of this Profile.
        :type: str
        """

        self._company_name = company_name

    @property
    def picture(self):
        """
        Gets the picture of this Profile.
        Image URL of the user.

        :return: The picture of this Profile.
        :rtype: str
        """
        return self._picture

    @picture.setter
    def picture(self, picture):
        """
        Sets the picture of this Profile.
        Image URL of the user.

        :param picture: The picture of this Profile.
        :type: str
        """

        self._picture = picture

    @property
    def subscription_type(self):
        """
        Gets the subscription_type of this Profile.
        Subscription level of the user

        :return: The subscription_type of this Profile.
        :rtype: str
        """
        return self._subscription_type

    @subscription_type.setter
    def subscription_type(self, subscription_type):
        """
        Sets the subscription_type of this Profile.
        Subscription level of the user

        :param subscription_type: The subscription_type of this Profile.
        :type: str
        """

        self._subscription_type = subscription_type

    @property
    def subscribed_crops(self):
        """
        Gets the subscribed_crops of this Profile.

        :return: The subscribed_crops of this Profile.
        :rtype: list[Crop]
        """
        return self._subscribed_crops

    @subscribed_crops.setter
    def subscribed_crops(self, subscribed_crops):
        """
        Sets the subscribed_crops of this Profile.

        :param subscribed_crops: The subscribed_crops of this Profile.
        :type: list[Crop]
        """

        self._subscribed_crops = subscribed_crops

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Profile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
