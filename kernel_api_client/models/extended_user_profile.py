# coding: utf-8

"""
    Kernel API

    Access Kernel insights programmatically

    OpenAPI spec version: 0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ExtendedUserProfile(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'company_name': 'str',
        'email': 'str',
        'email_alert_pref': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'phone': 'str',
        'picture': 'str',
        'push_alert_pref': 'str',
        'sms_alert_pref': 'str',
        'sms_sig_threshold': 'int',
        'subscribed_crops': 'list[SubscribedCrop]',
        'subscription_access_level': 'str',
        'user_id': 'int',
        'password': 'str'
    }

    attribute_map = {
        'company_name': 'company_name',
        'email': 'email',
        'email_alert_pref': 'email_alert_pref',
        'first_name': 'first_name',
        'last_name': 'last_name',
        'phone': 'phone',
        'picture': 'picture',
        'push_alert_pref': 'push_alert_pref',
        'sms_alert_pref': 'sms_alert_pref',
        'sms_sig_threshold': 'sms_sig_threshold',
        'subscribed_crops': 'subscribed_crops',
        'subscription_access_level': 'subscription_access_level',
        'user_id': 'user_id',
        'password': 'password'
    }

    def __init__(self, company_name=None, email=None, email_alert_pref=None, first_name=None, last_name=None, phone=None, picture=None, push_alert_pref=None, sms_alert_pref=None, sms_sig_threshold=None, subscribed_crops=None, subscription_access_level=None, user_id=None, password=None):
        """
        ExtendedUserProfile - a model defined in Swagger
        """

        self._company_name = None
        self._email = None
        self._email_alert_pref = None
        self._first_name = None
        self._last_name = None
        self._phone = None
        self._picture = None
        self._push_alert_pref = None
        self._sms_alert_pref = None
        self._sms_sig_threshold = None
        self._subscribed_crops = None
        self._subscription_access_level = None
        self._user_id = None
        self._password = None

        if company_name is not None:
          self.company_name = company_name
        if email is not None:
          self.email = email
        if email_alert_pref is not None:
          self.email_alert_pref = email_alert_pref
        if first_name is not None:
          self.first_name = first_name
        if last_name is not None:
          self.last_name = last_name
        if phone is not None:
          self.phone = phone
        if picture is not None:
          self.picture = picture
        if push_alert_pref is not None:
          self.push_alert_pref = push_alert_pref
        if sms_alert_pref is not None:
          self.sms_alert_pref = sms_alert_pref
        if sms_sig_threshold is not None:
          self.sms_sig_threshold = sms_sig_threshold
        if subscribed_crops is not None:
          self.subscribed_crops = subscribed_crops
        if subscription_access_level is not None:
          self.subscription_access_level = subscription_access_level
        if user_id is not None:
          self.user_id = user_id
        if password is not None:
          self.password = password

    @property
    def company_name(self):
        """
        Gets the company_name of this ExtendedUserProfile.
        Company name of the user

        :return: The company_name of this ExtendedUserProfile.
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """
        Sets the company_name of this ExtendedUserProfile.
        Company name of the user

        :param company_name: The company_name of this ExtendedUserProfile.
        :type: str
        """

        self._company_name = company_name

    @property
    def email(self):
        """
        Gets the email of this ExtendedUserProfile.
        Email address of the user

        :return: The email of this ExtendedUserProfile.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this ExtendedUserProfile.
        Email address of the user

        :param email: The email of this ExtendedUserProfile.
        :type: str
        """

        self._email = email

    @property
    def email_alert_pref(self):
        """
        Gets the email_alert_pref of this ExtendedUserProfile.
        User email alert preferences

        :return: The email_alert_pref of this ExtendedUserProfile.
        :rtype: str
        """
        return self._email_alert_pref

    @email_alert_pref.setter
    def email_alert_pref(self, email_alert_pref):
        """
        Sets the email_alert_pref of this ExtendedUserProfile.
        User email alert preferences

        :param email_alert_pref: The email_alert_pref of this ExtendedUserProfile.
        :type: str
        """

        self._email_alert_pref = email_alert_pref

    @property
    def first_name(self):
        """
        Gets the first_name of this ExtendedUserProfile.
        First name of the user.

        :return: The first_name of this ExtendedUserProfile.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """
        Sets the first_name of this ExtendedUserProfile.
        First name of the user.

        :param first_name: The first_name of this ExtendedUserProfile.
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """
        Gets the last_name of this ExtendedUserProfile.
        Last name of the user.

        :return: The last_name of this ExtendedUserProfile.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """
        Sets the last_name of this ExtendedUserProfile.
        Last name of the user.

        :param last_name: The last_name of this ExtendedUserProfile.
        :type: str
        """

        self._last_name = last_name

    @property
    def phone(self):
        """
        Gets the phone of this ExtendedUserProfile.
        Phone number of the user

        :return: The phone of this ExtendedUserProfile.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """
        Sets the phone of this ExtendedUserProfile.
        Phone number of the user

        :param phone: The phone of this ExtendedUserProfile.
        :type: str
        """

        self._phone = phone

    @property
    def picture(self):
        """
        Gets the picture of this ExtendedUserProfile.
        Image URL of the user.

        :return: The picture of this ExtendedUserProfile.
        :rtype: str
        """
        return self._picture

    @picture.setter
    def picture(self, picture):
        """
        Sets the picture of this ExtendedUserProfile.
        Image URL of the user.

        :param picture: The picture of this ExtendedUserProfile.
        :type: str
        """

        self._picture = picture

    @property
    def push_alert_pref(self):
        """
        Gets the push_alert_pref of this ExtendedUserProfile.
        User web push alert preferences

        :return: The push_alert_pref of this ExtendedUserProfile.
        :rtype: str
        """
        return self._push_alert_pref

    @push_alert_pref.setter
    def push_alert_pref(self, push_alert_pref):
        """
        Sets the push_alert_pref of this ExtendedUserProfile.
        User web push alert preferences

        :param push_alert_pref: The push_alert_pref of this ExtendedUserProfile.
        :type: str
        """

        self._push_alert_pref = push_alert_pref

    @property
    def sms_alert_pref(self):
        """
        Gets the sms_alert_pref of this ExtendedUserProfile.
        User sms alert preferences

        :return: The sms_alert_pref of this ExtendedUserProfile.
        :rtype: str
        """
        return self._sms_alert_pref

    @sms_alert_pref.setter
    def sms_alert_pref(self, sms_alert_pref):
        """
        Sets the sms_alert_pref of this ExtendedUserProfile.
        User sms alert preferences

        :param sms_alert_pref: The sms_alert_pref of this ExtendedUserProfile.
        :type: str
        """

        self._sms_alert_pref = sms_alert_pref

    @property
    def sms_sig_threshold(self):
        """
        Gets the sms_sig_threshold of this ExtendedUserProfile.
        User sms alert significance threshold

        :return: The sms_sig_threshold of this ExtendedUserProfile.
        :rtype: int
        """
        return self._sms_sig_threshold

    @sms_sig_threshold.setter
    def sms_sig_threshold(self, sms_sig_threshold):
        """
        Sets the sms_sig_threshold of this ExtendedUserProfile.
        User sms alert significance threshold

        :param sms_sig_threshold: The sms_sig_threshold of this ExtendedUserProfile.
        :type: int
        """

        self._sms_sig_threshold = sms_sig_threshold

    @property
    def subscribed_crops(self):
        """
        Gets the subscribed_crops of this ExtendedUserProfile.

        :return: The subscribed_crops of this ExtendedUserProfile.
        :rtype: list[SubscribedCrop]
        """
        return self._subscribed_crops

    @subscribed_crops.setter
    def subscribed_crops(self, subscribed_crops):
        """
        Sets the subscribed_crops of this ExtendedUserProfile.

        :param subscribed_crops: The subscribed_crops of this ExtendedUserProfile.
        :type: list[SubscribedCrop]
        """

        self._subscribed_crops = subscribed_crops

    @property
    def subscription_access_level(self):
        """
        Gets the subscription_access_level of this ExtendedUserProfile.
        Subscription level of the user

        :return: The subscription_access_level of this ExtendedUserProfile.
        :rtype: str
        """
        return self._subscription_access_level

    @subscription_access_level.setter
    def subscription_access_level(self, subscription_access_level):
        """
        Sets the subscription_access_level of this ExtendedUserProfile.
        Subscription level of the user

        :param subscription_access_level: The subscription_access_level of this ExtendedUserProfile.
        :type: str
        """

        self._subscription_access_level = subscription_access_level

    @property
    def user_id(self):
        """
        Gets the user_id of this ExtendedUserProfile.
        ID of the user

        :return: The user_id of this ExtendedUserProfile.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this ExtendedUserProfile.
        ID of the user

        :param user_id: The user_id of this ExtendedUserProfile.
        :type: int
        """

        self._user_id = user_id

    @property
    def password(self):
        """
        Gets the password of this ExtendedUserProfile.
        Password for the user.

        :return: The password of this ExtendedUserProfile.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """
        Sets the password of this ExtendedUserProfile.
        Password for the user.

        :param password: The password of this ExtendedUserProfile.
        :type: str
        """

        self._password = password

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ExtendedUserProfile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
