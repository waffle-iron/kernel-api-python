# coding: utf-8

"""
    Kernel API

    Access Kernel insights programmatically

    OpenAPI spec version: 0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ForecastMetadata(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active': 'bool',
        'crop': 'str',
        'external_model_description': 'str',
        'external_model_name': 'str',
        'latency_days': 'float',
        'metric_code': 'str',
        'model_type': 'str',
        'primary': 'bool',
        'publication_date': 'date',
        'secondary': 'bool',
        'static_perc_ground': 'float',
        'static_perc_sat': 'float',
        'static_perc_weather': 'float'
    }

    attribute_map = {
        'active': 'active',
        'crop': 'crop',
        'external_model_description': 'external_model_description',
        'external_model_name': 'external_model_name',
        'latency_days': 'latency_days',
        'metric_code': 'metric_code',
        'model_type': 'model_type',
        'primary': 'primary',
        'publication_date': 'publication_date',
        'secondary': 'secondary',
        'static_perc_ground': 'static_perc_ground',
        'static_perc_sat': 'static_perc_sat',
        'static_perc_weather': 'static_perc_weather'
    }

    def __init__(self, active=None, crop=None, external_model_description=None, external_model_name=None, latency_days=None, metric_code=None, model_type=None, primary=None, publication_date=None, secondary=None, static_perc_ground=None, static_perc_sat=None, static_perc_weather=None):
        """
        ForecastMetadata - a model defined in Swagger
        """

        self._active = None
        self._crop = None
        self._external_model_description = None
        self._external_model_name = None
        self._latency_days = None
        self._metric_code = None
        self._model_type = None
        self._primary = None
        self._publication_date = None
        self._secondary = None
        self._static_perc_ground = None
        self._static_perc_sat = None
        self._static_perc_weather = None

        if active is not None:
          self.active = active
        if crop is not None:
          self.crop = crop
        if external_model_description is not None:
          self.external_model_description = external_model_description
        if external_model_name is not None:
          self.external_model_name = external_model_name
        if latency_days is not None:
          self.latency_days = latency_days
        if metric_code is not None:
          self.metric_code = metric_code
        if model_type is not None:
          self.model_type = model_type
        if primary is not None:
          self.primary = primary
        if publication_date is not None:
          self.publication_date = publication_date
        if secondary is not None:
          self.secondary = secondary
        if static_perc_ground is not None:
          self.static_perc_ground = static_perc_ground
        if static_perc_sat is not None:
          self.static_perc_sat = static_perc_sat
        if static_perc_weather is not None:
          self.static_perc_weather = static_perc_weather

    @property
    def active(self):
        """
        Gets the active of this ForecastMetadata.

        :return: The active of this ForecastMetadata.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """
        Sets the active of this ForecastMetadata.

        :param active: The active of this ForecastMetadata.
        :type: bool
        """

        self._active = active

    @property
    def crop(self):
        """
        Gets the crop of this ForecastMetadata.

        :return: The crop of this ForecastMetadata.
        :rtype: str
        """
        return self._crop

    @crop.setter
    def crop(self, crop):
        """
        Sets the crop of this ForecastMetadata.

        :param crop: The crop of this ForecastMetadata.
        :type: str
        """

        self._crop = crop

    @property
    def external_model_description(self):
        """
        Gets the external_model_description of this ForecastMetadata.

        :return: The external_model_description of this ForecastMetadata.
        :rtype: str
        """
        return self._external_model_description

    @external_model_description.setter
    def external_model_description(self, external_model_description):
        """
        Sets the external_model_description of this ForecastMetadata.

        :param external_model_description: The external_model_description of this ForecastMetadata.
        :type: str
        """

        self._external_model_description = external_model_description

    @property
    def external_model_name(self):
        """
        Gets the external_model_name of this ForecastMetadata.

        :return: The external_model_name of this ForecastMetadata.
        :rtype: str
        """
        return self._external_model_name

    @external_model_name.setter
    def external_model_name(self, external_model_name):
        """
        Sets the external_model_name of this ForecastMetadata.

        :param external_model_name: The external_model_name of this ForecastMetadata.
        :type: str
        """

        self._external_model_name = external_model_name

    @property
    def latency_days(self):
        """
        Gets the latency_days of this ForecastMetadata.

        :return: The latency_days of this ForecastMetadata.
        :rtype: float
        """
        return self._latency_days

    @latency_days.setter
    def latency_days(self, latency_days):
        """
        Sets the latency_days of this ForecastMetadata.

        :param latency_days: The latency_days of this ForecastMetadata.
        :type: float
        """

        self._latency_days = latency_days

    @property
    def metric_code(self):
        """
        Gets the metric_code of this ForecastMetadata.

        :return: The metric_code of this ForecastMetadata.
        :rtype: str
        """
        return self._metric_code

    @metric_code.setter
    def metric_code(self, metric_code):
        """
        Sets the metric_code of this ForecastMetadata.

        :param metric_code: The metric_code of this ForecastMetadata.
        :type: str
        """

        self._metric_code = metric_code

    @property
    def model_type(self):
        """
        Gets the model_type of this ForecastMetadata.

        :return: The model_type of this ForecastMetadata.
        :rtype: str
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type):
        """
        Sets the model_type of this ForecastMetadata.

        :param model_type: The model_type of this ForecastMetadata.
        :type: str
        """

        self._model_type = model_type

    @property
    def primary(self):
        """
        Gets the primary of this ForecastMetadata.

        :return: The primary of this ForecastMetadata.
        :rtype: bool
        """
        return self._primary

    @primary.setter
    def primary(self, primary):
        """
        Sets the primary of this ForecastMetadata.

        :param primary: The primary of this ForecastMetadata.
        :type: bool
        """

        self._primary = primary

    @property
    def publication_date(self):
        """
        Gets the publication_date of this ForecastMetadata.

        :return: The publication_date of this ForecastMetadata.
        :rtype: date
        """
        return self._publication_date

    @publication_date.setter
    def publication_date(self, publication_date):
        """
        Sets the publication_date of this ForecastMetadata.

        :param publication_date: The publication_date of this ForecastMetadata.
        :type: date
        """

        self._publication_date = publication_date

    @property
    def secondary(self):
        """
        Gets the secondary of this ForecastMetadata.

        :return: The secondary of this ForecastMetadata.
        :rtype: bool
        """
        return self._secondary

    @secondary.setter
    def secondary(self, secondary):
        """
        Sets the secondary of this ForecastMetadata.

        :param secondary: The secondary of this ForecastMetadata.
        :type: bool
        """

        self._secondary = secondary

    @property
    def static_perc_ground(self):
        """
        Gets the static_perc_ground of this ForecastMetadata.

        :return: The static_perc_ground of this ForecastMetadata.
        :rtype: float
        """
        return self._static_perc_ground

    @static_perc_ground.setter
    def static_perc_ground(self, static_perc_ground):
        """
        Sets the static_perc_ground of this ForecastMetadata.

        :param static_perc_ground: The static_perc_ground of this ForecastMetadata.
        :type: float
        """

        self._static_perc_ground = static_perc_ground

    @property
    def static_perc_sat(self):
        """
        Gets the static_perc_sat of this ForecastMetadata.

        :return: The static_perc_sat of this ForecastMetadata.
        :rtype: float
        """
        return self._static_perc_sat

    @static_perc_sat.setter
    def static_perc_sat(self, static_perc_sat):
        """
        Sets the static_perc_sat of this ForecastMetadata.

        :param static_perc_sat: The static_perc_sat of this ForecastMetadata.
        :type: float
        """

        self._static_perc_sat = static_perc_sat

    @property
    def static_perc_weather(self):
        """
        Gets the static_perc_weather of this ForecastMetadata.

        :return: The static_perc_weather of this ForecastMetadata.
        :rtype: float
        """
        return self._static_perc_weather

    @static_perc_weather.setter
    def static_perc_weather(self, static_perc_weather):
        """
        Sets the static_perc_weather of this ForecastMetadata.

        :param static_perc_weather: The static_perc_weather of this ForecastMetadata.
        :type: float
        """

        self._static_perc_weather = static_perc_weather

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ForecastMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
