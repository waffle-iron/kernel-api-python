# coding: utf-8

"""
    Kernel API

    Access Kernel insights programmatically

    OpenAPI spec version: 0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Geography(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'country_iso': 'str',
        'geo_display_name': 'str',
        'geo_id': 'str',
        'geo_level': 'str'
    }

    attribute_map = {
        'country_iso': 'country_iso',
        'geo_display_name': 'geo_display_name',
        'geo_id': 'geo_id',
        'geo_level': 'geo_level'
    }

    def __init__(self, country_iso=None, geo_display_name=None, geo_id=None, geo_level=None):
        """
        Geography - a model defined in Swagger
        """

        self._country_iso = None
        self._geo_display_name = None
        self._geo_id = None
        self._geo_level = None

        if country_iso is not None:
          self.country_iso = country_iso
        if geo_display_name is not None:
          self.geo_display_name = geo_display_name
        if geo_id is not None:
          self.geo_id = geo_id
        if geo_level is not None:
          self.geo_level = geo_level

    @property
    def country_iso(self):
        """
        Gets the country_iso of this Geography.

        :return: The country_iso of this Geography.
        :rtype: str
        """
        return self._country_iso

    @country_iso.setter
    def country_iso(self, country_iso):
        """
        Sets the country_iso of this Geography.

        :param country_iso: The country_iso of this Geography.
        :type: str
        """

        self._country_iso = country_iso

    @property
    def geo_display_name(self):
        """
        Gets the geo_display_name of this Geography.

        :return: The geo_display_name of this Geography.
        :rtype: str
        """
        return self._geo_display_name

    @geo_display_name.setter
    def geo_display_name(self, geo_display_name):
        """
        Sets the geo_display_name of this Geography.

        :param geo_display_name: The geo_display_name of this Geography.
        :type: str
        """

        self._geo_display_name = geo_display_name

    @property
    def geo_id(self):
        """
        Gets the geo_id of this Geography.

        :return: The geo_id of this Geography.
        :rtype: str
        """
        return self._geo_id

    @geo_id.setter
    def geo_id(self, geo_id):
        """
        Sets the geo_id of this Geography.

        :param geo_id: The geo_id of this Geography.
        :type: str
        """

        self._geo_id = geo_id

    @property
    def geo_level(self):
        """
        Gets the geo_level of this Geography.

        :return: The geo_level of this Geography.
        :rtype: str
        """
        return self._geo_level

    @geo_level.setter
    def geo_level(self, geo_level):
        """
        Sets the geo_level of this Geography.

        :param geo_level: The geo_level of this Geography.
        :type: str
        """

        self._geo_level = geo_level

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Geography):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
